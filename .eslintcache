[{"C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\index.js":"1","C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\reportWebVitals.js":"2","C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\App.js":"3","C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\redux\\reducers.js":"4","C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\layout\\layout.js":"5","C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\axios\\axiosInstance.js":"6","C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\redux\\reducers\\authReducer.js":"7","C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\redux\\actions\\authActions.js":"8","C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\redux\\reducers\\userReducer.js":"9","C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\redux\\reducers\\attributeReducer.js":"10","C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\redux\\reducers\\categoryReducer.js":"11","C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\redux\\reducers\\orderReducer.js":"12","C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\redux\\reducers\\shoppingCartReducer.js":"13","C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\auth\\RoutesConfig.js":"14","C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\redux\\reducers\\productReducer.js":"15","C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\redux\\actionTypes.js":"16","C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\utils\\utils.js":"17","C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\views\\static\\Header.js":"18","C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\views\\HomePage.js":"19","C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\auth\\Roles.js":"20","C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\views\\auth\\SignInForm.js":"21","C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\views\\user\\InvalidTokenView.js":"22","C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\views\\admin\\AdminPanel.js":"23","C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\views\\user\\ChangePasswordForm.js":"24","C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\views\\auth\\SignUpForm.js":"25","C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\views\\user\\ForgotPasswordForm.js":"26","C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\views\\user\\SentEmailView.js":"27","C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\views\\orders\\OrderForm.js":"28","C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\views\\products\\ProductForm.js":"29","C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\views\\orders\\MyOrders.js":"30","C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\views\\admin\\category\\CategoryForm.js":"31","C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\views\\shopping_cart\\ShoppingCartView.js":"32","C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\views\\products\\ProductView.js":"33","C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\views\\products\\ProductDetails.js":"34","C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\components\\AuthButton.js":"35","C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\redux\\actions\\categoryActions.js":"36","C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\redux\\actions\\userActions.js":"37","C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\redux\\actions\\orderActions.js":"38","C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\redux\\actions\\attributeActions.js":"39","C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\utils\\imageUploadComponent.js":"40","C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\redux\\actions\\shoppingCartActions.js":"41","C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\redux\\actions\\productActions.js":"42","C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\utils\\productsFilterComponent.js":"43","C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\views\\admin\\category\\DefaultCategoryAttributes.js":"44","C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\views\\products\\productImage.js":"45"},{"size":955,"mtime":1641735691326,"results":"46","hashOfConfig":"47"},{"size":375,"mtime":1639511530443,"results":"48","hashOfConfig":"47"},{"size":571,"mtime":1639511530437,"results":"49","hashOfConfig":"47"},{"size":859,"mtime":1643640740374,"results":"50","hashOfConfig":"47"},{"size":347,"mtime":1639511530440,"results":"51","hashOfConfig":"47"},{"size":547,"mtime":1639511530438,"results":"52","hashOfConfig":"47"},{"size":1790,"mtime":1639511530442,"results":"53","hashOfConfig":"47"},{"size":2129,"mtime":1639511530441,"results":"54","hashOfConfig":"47"},{"size":872,"mtime":1639511530443,"results":"55","hashOfConfig":"47"},{"size":1856,"mtime":1641862718051,"results":"56","hashOfConfig":"47"},{"size":1457,"mtime":1639511530443,"results":"57","hashOfConfig":"47"},{"size":615,"mtime":1643640740375,"results":"58","hashOfConfig":"47"},{"size":598,"mtime":1643545590682,"results":"59","hashOfConfig":"47"},{"size":5702,"mtime":1643887487931,"results":"60","hashOfConfig":"47"},{"size":1720,"mtime":1643833718397,"results":"61","hashOfConfig":"47"},{"size":1932,"mtime":1643833718400,"results":"62","hashOfConfig":"47"},{"size":802,"mtime":1639511530444,"results":"63","hashOfConfig":"47"},{"size":3915,"mtime":1643640740377,"results":"64","hashOfConfig":"47"},{"size":320,"mtime":1639511530445,"results":"65","hashOfConfig":"47"},{"size":307,"mtime":1639511530438,"results":"66","hashOfConfig":"47"},{"size":3224,"mtime":1643393134565,"results":"67","hashOfConfig":"47"},{"size":922,"mtime":1639511530448,"results":"68","hashOfConfig":"47"},{"size":4188,"mtime":1643658392168,"results":"69","hashOfConfig":"47"},{"size":4452,"mtime":1643393134539,"results":"70","hashOfConfig":"47"},{"size":5440,"mtime":1643393134569,"results":"71","hashOfConfig":"47"},{"size":2542,"mtime":1643393134548,"results":"72","hashOfConfig":"47"},{"size":904,"mtime":1639511530448,"results":"73","hashOfConfig":"47"},{"size":9484,"mtime":1643658425020,"results":"74","hashOfConfig":"47"},{"size":20032,"mtime":1643831650435,"results":"75","hashOfConfig":"47"},{"size":5986,"mtime":1643831650434,"results":"76","hashOfConfig":"47"},{"size":12711,"mtime":1643834566285,"results":"77","hashOfConfig":"47"},{"size":6708,"mtime":1643756598556,"results":"78","hashOfConfig":"47"},{"size":7237,"mtime":1643845749539,"results":"79","hashOfConfig":"47"},{"size":8554,"mtime":1643889274349,"results":"80","hashOfConfig":"47"},{"size":1367,"mtime":1639511530439,"results":"81","hashOfConfig":"47"},{"size":1974,"mtime":1641727156961,"results":"82","hashOfConfig":"47"},{"size":1211,"mtime":1639511530442,"results":"83","hashOfConfig":"47"},{"size":880,"mtime":1643640740374,"results":"84","hashOfConfig":"47"},{"size":2739,"mtime":1641921596756,"results":"85","hashOfConfig":"47"},{"size":5657,"mtime":1643647637161,"results":"86","hashOfConfig":"47"},{"size":1462,"mtime":1643545590681,"results":"87","hashOfConfig":"47"},{"size":4294,"mtime":1643886478781,"results":"88","hashOfConfig":"47"},{"size":11286,"mtime":1643885766272,"results":"89","hashOfConfig":"47"},{"size":3788,"mtime":1643831650434,"results":"90","hashOfConfig":"47"},{"size":808,"mtime":1643889481020,"results":"91","hashOfConfig":"47"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},"1h2gwcc",{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"94"},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"94"},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"127","messages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"129","messages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"131","messages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"94"},{"filePath":"136","messages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"138","messages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"140","messages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"94"},{"filePath":"143","messages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"94"},{"filePath":"146","messages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"148","messages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"150","messages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"152","messages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"94"},{"filePath":"155","messages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"94"},{"filePath":"158","messages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"94"},{"filePath":"161","messages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"94"},{"filePath":"164","messages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"94"},{"filePath":"167","messages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"94"},{"filePath":"170","messages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"172","messages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"174","messages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"176","messages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"178","messages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"180","messages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"94"},{"filePath":"183","messages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"94"},{"filePath":"186","messages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"188","messages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"190","messages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"192","messages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"194","messages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\index.js",[],["196","197"],"C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\reportWebVitals.js",[],"C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\App.js",[],"C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\redux\\reducers.js",[],"C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\layout\\layout.js",[],"C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\axios\\axiosInstance.js",["198"],"import axios from 'axios';\r\n\r\nexport const AUTH_TOKEN = 'auth_token';\r\n\r\nconst axiosInstance = axios.create({\r\n    baseURL: 'http://localhost:8080'+'/api',\r\n    headers: {\r\n        'Access-Control-Allow-Origin': '*'\r\n    }\r\n});\r\n\r\naxiosInstance.interceptors.request.use(\r\n    config => {\r\n        const token = localStorage.getItem(AUTH_TOKEN);\r\n        if (token) {\r\n            config.headers.Authorization = `Bearer ${token}`;\r\n        }\r\n        return config;\r\n    },\r\n    error => Promise.reject(error)\r\n);\r\n\r\nexport default axiosInstance;\r\n","C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\redux\\reducers\\authReducer.js",["199"],"import { isExpired } from 'react-jwt';\r\nimport { AUTH_TOKEN } from '../../axios/axiosInstance';\r\nimport {AUTHENTICATE_TOKEN, CURRENT_USER, SIGN_IN, SIGN_OUT, SIGN_UP, UPDATE_TOKEN} from '../actionTypes';\r\n\r\nconst initialState = {\r\n    currentUser: null,\r\n    token: null,\r\n};\r\n\r\nexport const AuthReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SIGN_IN:\r\n            localStorage.setItem(AUTH_TOKEN, action.payload.token);\r\n            localStorage.setItem(CURRENT_USER, JSON.stringify(action.payload.user));\r\n            return {\r\n                ...state,\r\n                currentUser: action.payload.user,\r\n                token: action.payload.token\r\n            };\r\n        case SIGN_OUT:\r\n            localStorage.removeItem(AUTH_TOKEN);\r\n            localStorage.removeItem(CURRENT_USER);\r\n            return {\r\n                ...state,\r\n                currentUser: null,\r\n                token: null\r\n            };\r\n        case UPDATE_TOKEN:\r\n            let token = action.payload;\r\n            let currentUser = null;\r\n            const isExp = isExpired(token);\r\n\r\n            if (!isExp) {\r\n                localStorage.setItem(AUTH_TOKEN, token);\r\n                currentUser = JSON.parse(localStorage.getItem(CURRENT_USER));\r\n            } else {\r\n                localStorage.removeItem(CURRENT_USER);\r\n                localStorage.removeItem(AUTH_TOKEN);\r\n                token = null;\r\n            }\r\n            return {\r\n                ...state,\r\n                token: token,\r\n                currentUser: currentUser\r\n            };\r\n        case AUTHENTICATE_TOKEN:\r\n            return {\r\n                ...state\r\n            };\r\n        default:\r\n            return {\r\n                ...state\r\n            };\r\n    }\r\n};\r\n","C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\redux\\actions\\authActions.js",[],"C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\redux\\reducers\\userReducer.js",[],"C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\redux\\reducers\\attributeReducer.js",[],"C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\redux\\reducers\\categoryReducer.js",[],"C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\redux\\reducers\\orderReducer.js",[],"C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\redux\\reducers\\shoppingCartReducer.js",[],"C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\auth\\RoutesConfig.js",[],"C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\redux\\reducers\\productReducer.js",[],"C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\redux\\actionTypes.js",[],"C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\utils\\utils.js",[],"C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\views\\static\\Header.js",[],"C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\views\\HomePage.js",[],"C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\auth\\Roles.js",["200"],"export const getRoleName = (roleKey) => {\r\n    switch (roleKey) {\r\n        case 'ROLE_ADMIN':\r\n            return 'ADMIN';\r\n        case 'ROLE_USER':\r\n            return 'USER';\r\n        default:\r\n            return null;\r\n    }\r\n}\r\n\r\nexport default {\r\n    ADMIN: 'ROLE_ADMIN',\r\n    USER: 'ROLE_USER',\r\n};\r\n","C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\views\\auth\\SignInForm.js",[],"C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\views\\user\\InvalidTokenView.js",[],"C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\views\\admin\\AdminPanel.js",["201"],"import Button from '@mui/material/Button';\r\nimport {Link} from \"react-router-dom\";\r\nimport Paper from '@mui/material/Paper';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport {Edit} from '@mui/icons-material';\r\nimport HighlightOffIcon from '@mui/icons-material/HighlightOff';\r\nimport {wrapComponent} from \"react-snackbar-alert\";\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport React, {useEffect} from 'react';\r\nimport {CategoryActions} from '../../redux/actions/categoryActions';\r\n\r\nconst AdminPanel = wrapComponent(function ({createSnackbar}) {\r\n    const dispatch = useDispatch();\r\n    const categories = useSelector(state => state.category.categories);\r\n\r\n    useEffect(() => {\r\n        dispatch(CategoryActions.fetchAllCategories((success, response) => {\r\n\r\n        }));\r\n    }, []);\r\n\r\n    const handleCategoryDelete = id => {\r\n        dispatch(CategoryActions.deleteCategory(id));\r\n    };\r\n\r\n    return (\r\n        <div className={`container p-5`}>\r\n            <div>\r\n                <Button component={Link}\r\n                        to={'/categories/add'}\r\n                        variant=\"contained\" color=\"primary\"\r\n                        className={`text-white text-decoration-none float-right`}\r\n                >\r\n                    ADD CATEGORY\r\n                </Button>\r\n                <h3>\r\n                    Categories\r\n                </h3>\r\n                <div className={`pt-4`}>\r\n                    <TableContainer component={Paper}>\r\n                        <Table className={``} aria-label=\"simple table\">\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell align=\"center\" padding=\"none\" width={70}>#</TableCell>\r\n                                    <TableCell align=\"left\">Category</TableCell>\r\n                                    <TableCell align=\"center\">Actions</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {categories &&\r\n                                categories.map((category, i) => (\r\n                                    <TableRow key={category.id}>\r\n                                        <TableCell component=\"th\" scope=\"row\" name=\"categoryId\" padding=\"none\"\r\n                                                   align=\"center\">\r\n                                            {i + 1}\r\n                                        </TableCell>\r\n                                        <TableCell align=\"left\">{category.name}</TableCell>\r\n                                        <TableCell align=\"center\">\r\n                                            <Button onClick={() => {\r\n                                                // eslint-disable-next-line no-unused-expressions\r\n                                                ( window.confirm('Are you sure you wish to delete this category?')) ?\r\n                                                    handleCategoryDelete(category.id)\r\n                                                    : null\r\n                                            }}>\r\n                                                <HighlightOffIcon/>\r\n                                            </Button>\r\n                                            <Button\r\n                                                href={`/categories/edit/${category.id}`}\r\n                                            >\r\n                                                <Edit/>\r\n                                            </Button>\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                ))}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default AdminPanel;","C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\views\\user\\ChangePasswordForm.js",["202"],"import {wrapComponent} from \"react-snackbar-alert\";\r\nimport {useHistory, useParams} from \"react-router\";\r\nimport * as yup from \"yup\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Button from \"@mui/material/Button\";\r\nimport React, {useEffect, useState} from \"react\";\r\nimport {useFormik} from \"formik\";\r\nimport {UserActions} from \"../../redux/actions/userActions\";\r\nimport {AuthActions} from \"../../redux/actions/authActions\";\r\nimport * as Yup from \"yup\";\r\nimport InputLabel from \"@mui/material/InputLabel\";\r\n\r\nconst validationSchema = yup.object({\r\n    newPassword: yup.string('Enter your password')\r\n        .min(6, 'Password should be of minimum 6 characters length')\r\n        .required('Password is required')\r\n        .oneOf([Yup.ref('repeatNewPassword'), null], 'Passwords must match'),\r\n    repeatNewPassword: yup.string('Repeat new password')\r\n        .min(6, 'Password should be of minimum 6 characters length')\r\n        .required('It is required to repeat the new password')\r\n        .oneOf([Yup.ref('newPassword'), null], 'Passwords must match')\r\n});\r\n\r\nconst ChangePasswordForm = wrapComponent(function ({createSnackbar}) {\r\n    const {authToken} = useParams();\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const [userId, setUserId] = useState('');\r\n\r\n    useEffect(() => {\r\n        dispatch(AuthActions.authenticateToken(authToken, (success, response) => {\r\n            if (success) {\r\n                setUserId(response.data)\r\n            } else {\r\n                history.push(\"/forgot-password/invalid-token\");\r\n            }\r\n        }));\r\n    }, []);\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            newPassword: '',\r\n            repeatNewPassword: ''\r\n        },\r\n        validationSchema,\r\n        onSubmit: values => {\r\n            dispatch(\r\n                UserActions.changePassword({\r\n                        userId: userId,\r\n                        newPassword: values.newPassword\r\n                    },\r\n                    success => {\r\n                        if (Boolean(success)) {\r\n                            createSnackbar({\r\n                                message: \"Successfully changed password\",\r\n                                timeout: 2500,\r\n                                theme: 'success'\r\n                            });\r\n                            history.push('/signin');\r\n                        } else {\r\n                            createSnackbar({\r\n                                message: \"Error changing password\",\r\n                                timeout: 2500,\r\n                                theme: 'error'\r\n                            });\r\n                        }\r\n                    }\r\n                )\r\n            );\r\n        }\r\n    })\r\n\r\n    return (\r\n        <form className={`container w-50 pt-5`} onSubmit={formik.handleSubmit}>\r\n            <div>\r\n                <h3>Enter new password</h3>\r\n            </div>\r\n            <InputLabel className={`pt-3`}>\r\n                New Password\r\n            </InputLabel>\r\n            <TextField fullWidth\r\n                       id='newPassword' name='newPassword'\r\n                       value={formik.values.newPassword}\r\n                       type='password'\r\n                       onChange={formik.handleChange}\r\n                       error={formik.touched.newPassword && Boolean(formik.errors.newPassword)}\r\n                       helperText={formik.touched.newPassword && formik.errors.newPassword}\r\n            >\r\n            </TextField>\r\n            <InputLabel className={`pt-2`}>\r\n                Repeat New Password\r\n            </InputLabel>\r\n            <TextField fullWidth\r\n                       id='repeatNewPassword' name='repeatNewPassword'\r\n                       value={formik.values.repeatNewPassword}\r\n                       type='password'\r\n                       onChange={formik.handleChange}\r\n                       error={formik.touched.repeatNewPassword && Boolean(formik.errors.repeatNewPassword)}\r\n                       helperText={formik.touched.repeatNewPassword && formik.errors.repeatNewPassword}\r\n            >\r\n            </TextField>\r\n            <Button color=\"primary\" variant=\"contained\" fullWidth type=\"submit\"\r\n                    className={`mt-3`}\r\n            >\r\n                Submit\r\n            </Button>\r\n        </form>\r\n    );\r\n\r\n})\r\n\r\nexport default ChangePasswordForm;","C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\views\\auth\\SignUpForm.js",[],"C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\views\\user\\ForgotPasswordForm.js",[],"C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\views\\user\\SentEmailView.js",[],"C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\views\\orders\\OrderForm.js",["203","204","205","206"],"import Button from '@mui/material/Button';\r\nimport TextField from '@mui/material/TextField';\r\nimport {useFormik} from 'formik';\r\nimport React, {useEffect, useState} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {useHistory, useParams} from 'react-router';\r\nimport {wrapComponent} from 'react-snackbar-alert';\r\nimport * as yup from 'yup';\r\nimport {OrderActions} from '../../redux/actions/orderActions';\r\nimport {CountryDropdown, RegionDropdown, CountryRegionData} from 'react-country-region-selector';\r\nimport {Link} from 'react-router-dom'\r\nimport {ShoppingCartActions} from \"../../redux/actions/shoppingCartActions\";\r\nimport {sortElementsByDateCreated} from \"../../utils/utils\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport Table from \"@mui/material/Table\";\r\nimport TableHead from \"@mui/material/TableHead\";\r\nimport TableRow from \"@mui/material/TableRow\";\r\nimport TableCell from \"@mui/material/TableCell\";\r\nimport TableBody from \"@mui/material/TableBody\";\r\nimport HighlightOffIcon from \"@mui/icons-material/HighlightOff\";\r\nimport TableContainer from \"@mui/material/TableContainer\";\r\n\r\nconst validationSchema = yup.object({\r\n    address: yup.string('Enter your address').required('Address is required'),\r\n    telephone: yup.string('Enter your phone number').required('Phone number is required'),\r\n});\r\n\r\nconst OrderForm = wrapComponent(function ({createSnackbar}) {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const [region, setRegion] = useState(\"\");\r\n    const auth = useSelector(state => state.auth.currentUser);\r\n    const [products, setProducts] = useState(null);\r\n    const {username} = useParams();\r\n\r\n    useEffect(() => {\r\n        dispatch(ShoppingCartActions.fetchShoppingCart(username, (success, response) => {\r\n            if (success) {\r\n                if (username === response.data.username) {\r\n                    setProducts(sortElementsByDateCreated(response.data.productsInShoppingCart));\r\n                } else {\r\n                    createSnackbar({\r\n                        message: 'Sorry, you must be signed in in order to proceed.',\r\n                        timeout: 3000,\r\n                        theme: 'error'\r\n                    });\r\n                    history.goBack();\r\n                }\r\n            } else {\r\n                createSnackbar({\r\n                    message: 'Error while accessing checkout page.',\r\n                    timeout: 2500,\r\n                    theme: 'error'\r\n                });\r\n                history.goBack();\r\n            }\r\n        }));\r\n    }, []);\r\n\r\n    const selectRegion = (region) => {\r\n        setRegion(region)\r\n    }\r\n\r\n    const calculateTotalPrice = products => {\r\n        let totalPrice = 0;\r\n        products.map(product => (\r\n            totalPrice += product.priceInMKD\r\n        ))\r\n        return totalPrice;\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            address: '',\r\n            telephone: '',\r\n\r\n        },\r\n        validationSchema,\r\n        onSubmit: values => {\r\n            if (Boolean(auth) && auth.username === username) {\r\n                dispatch(OrderActions.makeOrder({\r\n                        username: auth.username,\r\n                        city: region,\r\n                        telephone: values.telephone,\r\n                        address: values.address\r\n                    }, (success, response) => {\r\n                        createSnackbar({\r\n                            message: success ? 'Successfully made order.' : 'Error while making order. Try again!',\r\n                            timeout: 2500,\r\n                            theme: success ? 'success' : 'error'\r\n                        });\r\n                        success && history.push(`/my-orders/${username}`);\r\n                    }\r\n                ));\r\n            }\r\n        }\r\n    });\r\n\r\n    if (Boolean(auth) && auth.username === username) {\r\n        return (\r\n            <form onSubmit={formik.handleSubmit} className={`container w-50 pt-5`}>\r\n                <div>\r\n                    <h3>\r\n                        Checkout details\r\n                    </h3>\r\n                </div>\r\n                <div className={`row py-2`}>\r\n                    <div className={`col-md-8`}>\r\n                        <TextField\r\n                            fullWidth\r\n                            id=\"address\"\r\n                            name=\"address\"\r\n                            label=\"Address\"\r\n                            value={formik.values.address}\r\n                            onChange={formik.handleChange}\r\n                            error={formik.touched.address && Boolean(formik.errors.address)}\r\n                            helperText={formik.touched.address && formik.errors.address}\r\n                        />\r\n                    </div>\r\n                    <div className={`col-md-4`}>\r\n                        <RegionDropdown\r\n                            id=\"region\"\r\n                            name=\"region\"\r\n                            country={`Macedonia, Republic of`}\r\n                            required={true}\r\n                            value={region}\r\n                            defaultOptionLabel={`Select city`}\r\n                            onChange={(region) => selectRegion(region)}/>\r\n                    </div>\r\n                </div>\r\n                <div className={`row py-2`}>\r\n                    <div className={`col`}>\r\n                        <TextField\r\n                            fullWidth\r\n                            id=\"telephone\"\r\n                            name=\"telephone\"\r\n                            label=\"Telephone\"\r\n                            value={formik.values.telephone}\r\n                            onChange={formik.handleChange}\r\n                            error={formik.touched.telephone && Boolean(formik.errors.telephone)}\r\n                            helperText={formik.touched.telephone && formik.errors.telephone}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <h4>Order details</h4>\r\n                <TableContainer component={Paper}>\r\n                    <Table className={``} aria-label=\"simple table\">\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell align=\"left\"/>\r\n                                <TableCell align=\"left\">Product</TableCell>\r\n                                <TableCell align=\"left\">Price</TableCell>\r\n                                <TableCell align=\"left\">Quantity</TableCell>\r\n                                <TableCell align=\"left\">Total price</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {products && products.map((product, i) => (\r\n                                <TableRow key={product.id}>\r\n                                    <TableCell component=\"th\" scope=\"row\" name=\"productInCartId\" padding=\"none\"\r\n                                               align=\"center\">\r\n                                        {i + 1}\r\n                                    </TableCell>\r\n                                    <TableCell align=\"left\">{product.productTitle}</TableCell>\r\n                                    <TableCell align=\"left\">{product.priceInMKD}</TableCell>\r\n                                    <TableCell align=\"left\">{product.quantity}</TableCell>\r\n                                    <TableCell align=\"left\">\r\n                                        {product.priceInMKD * product.quantity}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                            <TableRow>\r\n                                <TableCell align=\"center\">Total:</TableCell>\r\n                                <TableCell/>\r\n                                <TableCell/>\r\n                                <TableCell/>\r\n                                <TableCell align=\"left\">\r\n                                    {products && calculateTotalPrice(products)}\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n                <Button color=\"primary\" variant=\"contained\" fullWidth type='submit' className={`my-4`}>\r\n                    Make Order\r\n                </Button>\r\n            </form>\r\n        );\r\n    } else {\r\n        return (\r\n            <div className={`container w-50 pt-5`}>\r\n                <h3>You must be signed in to complete this process</h3>\r\n                <div className={`row my-4`}>\r\n                    <div className={`col`}>\r\n                        <Button component={Link} to={`/products`}\r\n                                color=\"primary\" fullWidth>\r\n                            Products\r\n                        </Button>\r\n                    </div>\r\n                    <div className={`col`}>\r\n                        <Button component={Link} to={`/signin`}\r\n                                color=\"primary\" variant=\"contained\" fullWidth\r\n                                className={`text-white text-decoration-none`}\r\n                        >\r\n                            Sign in\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n});\r\n\r\nexport default OrderForm;\r\n","C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\views\\products\\ProductForm.js",["207"],"import React, {useEffect, useRef, useState} from \"react\";\r\nimport {Form, FieldArray, Formik } from \"formik\";\r\nimport Button from \"@mui/material/Button\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport {FormControl, InputLabel, MenuItem, Select, InputAdornment} from \"@mui/material\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport * as yup from \"yup\";\r\nimport {wrapComponent} from \"react-snackbar-alert\";\r\nimport {useHistory, useParams} from \"react-router\";\r\nimport {ProductActions} from \"../../redux/actions/productActions\";\r\nimport {CategoryActions} from \"../../redux/actions/categoryActions\";\r\nimport {AttributeActions} from \"../../redux/actions/attributeActions\";\r\nimport {CircularProgress} from \"@mui/material\";\r\nimport ImageUploadComponent from \"../../utils/imageUploadComponent\";\r\n\r\nconst validationSchema = yup.object({\r\n    productTitle: yup.string(\"Enter product title\").required(\"Product title is required\"),\r\n    productDescriptionHTML: yup.string(\"Enter description\").required(\"Description is required\"),\r\n    priceInMKD: yup.number(\"Enter price\").required(\"Price is required\").min(0, 'Minimum price is 0 MKD'),\r\n    categoryId: yup.number(\"Please select category\").required(\"Category is required\"),\r\n});\r\n\r\nconst ProductForm = wrapComponent(function ({createSnackbar}) {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const {productId} = useParams();\r\n    const [categories, setCategories] = useState([]);\r\n    const [attributes, setAttributes] = useState([]);\r\n    const [areThereAttributes, setAreThereAttributes] = useState(true);\r\n    const [imageIdsToRemove, setImageIdsToRemove] = useState([]);\r\n    const [images, setImages] = useState({\r\n        images: [],\r\n        mainImage: 0\r\n    });\r\n    const [validateMainImage, setValidateMainImage] = useState(false)\r\n    const [backendWorking, setBackendWorking] = useState(false)\r\n    const formikRef = useRef(null)\r\n\r\n    let initialValues = {\r\n        id: '',\r\n        categoryId: '',\r\n        productTitle: '',\r\n        productDescriptionHTML: '',\r\n        priceInMKD: '',\r\n        attributeIdAndValueMap: {},\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (Boolean(productId)) {\r\n            dispatch(ProductActions.fetchProduct(productId, (success, response) => {\r\n                if (success) {\r\n                    formikRef.current.setFieldValue(\"id\", response.data.id);\r\n                    formikRef.current.setFieldValue(\"categoryId\", response.data.categoryId);\r\n                    formikRef.current.setFieldValue(\"productTitle\", response.data.productTitle);\r\n                    formikRef.current.setFieldValue(\"productDescriptionHTML\", response.data.productDescriptionHTML);\r\n                    formikRef.current.setFieldValue(\"priceInMKD\", response.data.priceInMKD);\r\n                    formikRef.current.setFieldValue(\"attributeIdAndValueMap\", response.data.attributeIdAndValueMap);\r\n                    dispatch(AttributeActions.fetchAttributesByCategory(response.data.categoryId, (success, response) => {\r\n                        if (success) {\r\n                            setAttributes(response.data);\r\n                        } else {\r\n                            alert(\"Error while fetching attributes.\");\r\n                        }\r\n                    }))\r\n                } else {\r\n                    if (response.data.message) {\r\n                        alert(response.data.message);\r\n                    } else {\r\n                        alert(\"Product not found\");\r\n                    }\r\n                    history.push(\"/products\");\r\n                }\r\n            }));\r\n        }\r\n        dispatch(CategoryActions.fetchAllCategories((success, response) => {\r\n            if (success) {\r\n                setCategories(response.data);\r\n            } else {\r\n                alert(\"Error while fetching categories.\");\r\n            }\r\n        }));\r\n\r\n    }, []);\r\n\r\n    function onChangeCategory(categoryId){\r\n        dispatch(AttributeActions.fetchAttributesByCategory(categoryId, (success, response) => {\r\n            if (success) {\r\n                formikRef.current.setFieldValue(\"attributeIdAndValueMap\", {});\r\n                setAttributes(response.data);\r\n                setAreThereAttributes(response.data.length > 0)\r\n            } else {\r\n                if (response.data) {\r\n                    alert(response.data.message);\r\n                } else {\r\n                    alert(\"Attribute fetching error!\");\r\n                }\r\n                history.push(\"/products\");\r\n            }\r\n        }))\r\n    }\r\n\r\n    function deleteProduct(productId){\r\n        if(window.confirm(\"Are you sure you want to delete this product?\")){\r\n            dispatch(ProductActions.deleteProduct(productId))\r\n            history.push(\"/products\");\r\n            window.location.reload();\r\n        }\r\n    }\r\n\r\n    function handleImagesChange(imageState){\r\n        setImages(imageState)\r\n    }\r\n\r\n    function removeImageRemotely(image_id){\r\n        setImageIdsToRemove([...imageIdsToRemove, image_id])\r\n    }\r\n\r\n    function onSubmit(values) {\r\n        var tempImgValuesArray = []\r\n        for(let i=0; i<images.images.length; i++)\r\n            tempImgValuesArray.push(i+1)\r\n        if(images.images.length > 0 && !tempImgValuesArray.includes(images.mainImage)){\r\n            setValidateMainImage(true)\r\n            return;\r\n        }\r\n        else{\r\n            setValidateMainImage(false)\r\n        }\r\n        setBackendWorking(true)\r\n        if(Boolean(productId)){\r\n            let i=0;\r\n            function deleteProductImage(imageId){\r\n                dispatch(\r\n                    ProductActions.deleteProductImage(productId, imageId, (success, response) => {\r\n                        i++\r\n                        if(i<imageIdsToRemove.length)\r\n                            deleteProductImage(imageIdsToRemove[i])\r\n                    })\r\n                )\r\n            }\r\n            deleteProductImage(imageIdsToRemove[i])\r\n        }\r\n        Boolean(productId) ? dispatch(\r\n            ProductActions.updateProduct({\r\n                id: values.id,\r\n                categoryId: values.categoryId,\r\n                productTitle: values.productTitle,\r\n                productDescriptionHTML: values.productDescriptionHTML,\r\n                priceInMKD: values.priceInMKD,\r\n                attributeIdAndValueMap: values.attributeIdAndValueMap\r\n            }, (success, response) => {\r\n                if(success) {\r\n                    if (images.images.length > 0) {\r\n                        setBackendWorking(true);\r\n                        var imagesToUpload = []\r\n                        for(let i=0; i<images.images.length; i++){\r\n                            if(images.images[i] instanceof File){\r\n                                imagesToUpload.push(images.images[i])\r\n                            }\r\n                        }\r\n                        if(imagesToUpload.length === 0){\r\n                            createSnackbar({\r\n                                message: success ? 'Successfully Updated Product' : 'Product failed to Update',\r\n                                timeout: 2500,\r\n                                theme: success ? 'success' : 'error'\r\n                            });\r\n                            setBackendWorking(false)\r\n                        }\r\n                        else{\r\n                            let i=0;\r\n                            function uploadNewImage(imageToUpload){\r\n                                dispatch(\r\n                                    ProductActions.addNewProductImage(productId, imageToUpload, (success2, response) => {\r\n                                        if(!success2){\r\n                                            createSnackbar({\r\n                                                message: 'Image failed to Update',\r\n                                                timeout: 2500,\r\n                                                theme: 'error'\r\n                                            });\r\n                                        }\r\n                                        i++\r\n                                        if(i<imagesToUpload.length){\r\n                                            uploadNewImage(imagesToUpload[i])\r\n                                        }\r\n                                        else{\r\n                                            createSnackbar({\r\n                                                message: success2 ? 'Successfully Updated Product' : 'Product failed to Update',\r\n                                                timeout: 2500,\r\n                                                theme: success2 ? 'success' : 'error'\r\n                                            });\r\n                                            setBackendWorking(false)\r\n                                        }\r\n                                    })\r\n                                )\r\n                            }\r\n                            uploadNewImage(imagesToUpload[i])\r\n                        }\r\n                        if(images.images[images.mainImage-1] instanceof File){\r\n                            createSnackbar({\r\n                                message: 'Please re-select your main product image after images have finished uploading',\r\n                                timeout: 7000,\r\n                                theme: 'warning'\r\n                            });\r\n                        }\r\n                        else{\r\n                            const parts = images.images[images.mainImage-1].split(\"/\")\r\n                            dispatch(\r\n                                ProductActions.setMainProductImage(productId, Number(parts[parts.length - 1].replace(\".jpg\", \"\")))\r\n                            )\r\n                        }\r\n                        success && history.push(`/products/edit/${response.data.id}`);\r\n                    } else {\r\n                        createSnackbar({\r\n                            message: success ? 'Successfully Updated Product' : 'Product failed to Update',\r\n                            timeout: 2500,\r\n                            theme: success ? 'success' : 'error'\r\n                        });\r\n                        setBackendWorking(false)\r\n                        success && history.push(`/products/edit/${response.data.id}`);\r\n                    }\r\n                }\r\n            })\r\n        ) : dispatch(\r\n            ProductActions.addProduct({\r\n                categoryId: values.categoryId,\r\n                productTitle: values.productTitle,\r\n                productDescriptionHTML: values.productDescriptionHTML,\r\n                priceInMKD: values.priceInMKD,\r\n                attributeIdAndValueMap: values.attributeIdAndValueMap\r\n            }, (success, response) => {\r\n                if(success) {\r\n                    if (images.images.length > 0) {\r\n                        dispatch(\r\n                            ProductActions.addAllProductImages(response.data.id, images.mainImage, images.images, (success2, response2) => {\r\n                                createSnackbar({\r\n                                    message: success2 ? 'Successfully Created Product' : 'Product failed to Create',\r\n                                    timeout: 2500,\r\n                                    theme: success2 ? 'success' : 'error'\r\n                                });\r\n                                setBackendWorking(false)\r\n                                success2 && history.push(`/products/edit/${response.data.id}`);\r\n                            })\r\n                        )\r\n                    } else {\r\n                        createSnackbar({\r\n                            message: success ? 'Successfully Created Product' : 'Product failed to Create',\r\n                            timeout: 2500,\r\n                            theme: success ? 'success' : 'error'\r\n                        });\r\n                        setBackendWorking(false)\r\n                        success && history.push(`/products/edit/${response.data.id}`);\r\n                    }\r\n                }\r\n            })\r\n        );\r\n    }\r\n    return (\r\n        <Formik initialValues={initialValues} validationSchema={validationSchema} onSubmit={onSubmit}\r\n                innerRef={formikRef}>\r\n            {({errors, values, touched, setValues, handleChange}) => (\r\n                <Form className={`container pt-5 w-50`}>\r\n                    <div>\r\n                        <h3>\r\n                            {Boolean(productId) ? 'Edit Product' : 'New Product'}\r\n                        </h3>\r\n                        <TextField\r\n                            fullWidth\r\n                            id=\"productTitle\"\r\n                            name=\"productTitle\"\r\n                            label=\"Product Title\"\r\n                            className={`py-2`}\r\n                            value={values.productTitle}\r\n                            onChange={handleChange}\r\n                            error={touched.productTitle && Boolean(errors.productTitle)}\r\n                            helperText={touched.productTitle && errors.productTitle}\r\n                        />\r\n                        <TextField\r\n                            fullWidth\r\n                            id=\"productDescriptionHTML\"\r\n                            name=\"productDescriptionHTML\"\r\n                            label=\"Description\"\r\n                            multiline\r\n                            rows={5}\r\n                            className={`py-2`}\r\n                            value={values.productDescriptionHTML}\r\n                            onChange={handleChange}\r\n                            error={touched.productDescriptionHTML && Boolean(errors.productDescriptionHTML)}\r\n                            helperText={touched.productDescriptionHTML && errors.productDescriptionHTML}\r\n                        />\r\n                        <div className={`row`}>\r\n                            <div className={`col`}>\r\n                                <TextField\r\n                                    fullWidth\r\n                                    id=\"priceInMKD\"\r\n                                    name=\"priceInMKD\"\r\n                                    label=\"Price in MKD\"\r\n                                    type=\"number\"\r\n                                    value={values.priceInMKD}\r\n                                    onChange={handleChange}\r\n                                    error={touched.priceInMKD && Boolean(errors.priceInMKD)}\r\n                                    helperText={touched.priceInMKD && errors.priceInMKD}\r\n                                />\r\n                            </div>\r\n                            <div className={`col`}>\r\n                                <FormControl fullWidth>\r\n                                    <InputLabel>Category</InputLabel>\r\n                                    <Select\r\n                                        error={touched.categoryId && Boolean(errors.categoryId)}\r\n                                        helperText={touched.categoryId && errors.categoryId}\r\n                                        id='categoryId' name='categoryId'\r\n                                        onChange={change => {\r\n                                            values.categoryId = change.target.value;\r\n                                            onChangeCategory(change.target.value);\r\n                                        }}\r\n                                        value={values.categoryId}\r\n                                    >\r\n                                        {\r\n                                            categories.map((category, i) => {\r\n                                                return (\r\n                                                    <MenuItem key={category.id} value={category.id}>\r\n                                                        {category.name}\r\n                                                    </MenuItem>\r\n                                                )\r\n                                            })\r\n                                        }\r\n                                    </Select>\r\n                                </FormControl>\r\n                            </div>\r\n                        </div>\r\n                        <div className={'row pt-3'}>\r\n                            <div className={'col'}>\r\n                                <h4>Images</h4>\r\n                                <small>*Please select the main image by clicking on it after you upload it*</small>\r\n                                <ImageUploadComponent\r\n                                    handleImagesChange={handleImagesChange}\r\n                                    productId={productId ? productId : -1}\r\n                                    removeImageRemotely={removeImageRemotely}\r\n                                />\r\n                                {validateMainImage ? <div className={\"text-warning\"}>Please select the main product image</div> : null}\r\n                            </div>\r\n                            <div className={'col'}>\r\n                                <h4>Attributes</h4>\r\n                                <FieldArray name=\"attributes\">\r\n                                    {() => (attributes.map((attribute, i) => {\r\n                                        return (\r\n                                            <TextField\r\n                                                required\r\n                                                fullWidth\r\n                                                label={attributes[i].name}\r\n                                                name={`attributeIdAndValueMap[${attribute.id}]`}\r\n                                                type={attributes[i].numeric ? \"number\" : \"text\"}\r\n                                                onChange={handleChange}\r\n                                                value={values.attributeIdAndValueMap[attribute.id]}\r\n                                                sx={{ m: 1, width: '25ch' }}\r\n                                                InputProps={{\r\n                                                    endAdornment: <InputAdornment position=\"end\">{attributes[i].suffix}</InputAdornment>,\r\n                                                }}\r\n                                            />\r\n                                        );\r\n                                    }))}\r\n                                </FieldArray>\r\n                                {\r\n                                    areThereAttributes ?  null : \"No attributes for this category.\"\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className={`pt-3 float-left`}>\r\n                            {backendWorking ? <CircularProgress /> :\r\n                                <Button\r\n                                color=\"primary\"\r\n                                variant=\"contained\"\r\n                                type=\"submit\">\r\n                                {productId ? \"Edit\" : \"Create\"}\r\n                            </Button>\r\n                            }\r\n                            {productId && !backendWorking ? <Button\r\n                                className={'bg-danger'}\r\n                                variant=\"contained\"\r\n                                onClick={() => deleteProduct(productId)}\r\n                            >\r\n                                Delete Product\r\n                            </Button> : null}\r\n                            {backendWorking ? null :\r\n                                <Button\r\n                                color=\"primary\"\r\n                                href={'/products'}\r\n                            >\r\n                                Exit\r\n                            </Button> }\r\n                        </div>\r\n                    </div>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    );\r\n});\r\n\r\nexport default ProductForm;\r\n","C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\views\\orders\\MyOrders.js",["208"],"import {wrapComponent} from \"react-snackbar-alert\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {useHistory, useParams} from \"react-router\";\r\nimport {OrderActions} from \"../../redux/actions/orderActions\";\r\nimport {Link} from \"react-router-dom\";\r\nimport Button from \"@mui/material/Button\";\r\nimport React, {useEffect, useState} from \"react\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport Table from \"@mui/material/Table\";\r\nimport TableHead from \"@mui/material/TableHead\";\r\nimport TableRow from \"@mui/material/TableRow\";\r\nimport TableCell from \"@mui/material/TableCell\";\r\nimport TableBody from \"@mui/material/TableBody\";\r\nimport TableContainer from \"@mui/material/TableContainer\";\r\nimport {sortElementsByDateCreated} from \"../../utils/utils\";\r\n\r\nconst MyOrders = wrapComponent(function ({createSnackbar}) {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n    const auth = useSelector(state => state.auth.currentUser);\r\n    const [orders, setOrders] = useState(null);\r\n    const {username} = useParams();\r\n\r\n    useEffect(() => {\r\n        dispatch(OrderActions.fetchOrders(username, (success, response) => {\r\n            if (success) {\r\n                if (response.data.length > 0) {\r\n                    if (username === response.data[0].userUsername) {\r\n                        setOrders(sortElementsByDateCreated(response.data));\r\n                    } else {\r\n                        createSnackbar({\r\n                            message: 'Sorry, you must be signed in in order to see your orders.',\r\n                            timeout: 3000,\r\n                            theme: 'error'\r\n                        });\r\n                        history.goBack();\r\n                    }\r\n                }\r\n            } else {\r\n                createSnackbar({\r\n                    message: 'Error while accessing your orders.',\r\n                    timeout: 2500,\r\n                    theme: 'error'\r\n                });\r\n                history.goBack();\r\n            }\r\n        }));\r\n    }, []);\r\n\r\n    const calculateTotalPrice = products => {\r\n        let totalPrice = 0;\r\n        products.map(product => (\r\n            totalPrice += product.priceInMKD\r\n        ))\r\n        return totalPrice;\r\n    }\r\n\r\n    if (Boolean(auth) && auth.username === username) {\r\n        return (\r\n            <div className={`container p-5`}>\r\n                <div className={`pb-3 mb-3`}>\r\n                    <h3>\r\n                        My Orders\r\n                    </h3>\r\n                </div>\r\n                <TableContainer component={Paper}>\r\n                    <Table className={``} aria-label=\"simple table\">\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell align=\"left\"/>\r\n                                <TableCell align=\"left\">Products</TableCell>\r\n                                <TableCell align=\"left\">Address Details</TableCell>\r\n                                <TableCell align=\"left\">Price</TableCell>\r\n                                <TableCell align=\"left\">Order Status</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {orders && orders.map((order, i) => (\r\n                                <TableRow key={order.id}>\r\n                                    <TableCell component=\"th\" scope=\"row\" name=\"order\" padding=\"none\"\r\n                                               align=\"center\">\r\n                                        {i + 1}\r\n                                    </TableCell>\r\n                                    <TableCell align=\"left\">\r\n                                        {\r\n                                            order.productsInOrder.map((product, i) => (\r\n                                                <div>{product.productTitle} X{product.quantity}</div>\r\n                                            ))\r\n                                        }\r\n                                    </TableCell>\r\n                                    <TableCell align=\"left\">{order.address} {order.city}</TableCell>\r\n                                    <TableCell align=\"left\">{calculateTotalPrice(order.productsInOrder)} MKD</TableCell>\r\n                                    <TableCell align=\"left\">{order.orderStatus}</TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n                <div className={`pt-3 float-left`}>\r\n                    <Button component={Link}\r\n                            color=\"primary\"\r\n                            variant=\"contained\"\r\n                            className={`text-white text-decoration-none`}\r\n                            to={`/products`}\r\n                    >\r\n                        Continue shopping\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        );\r\n    } else {\r\n        return (\r\n            <div className={`container pt-5 w-50`}>\r\n                <h3>You must be signed in to see your orders.</h3>\r\n                <div className={`row my-4`}>\r\n                    <div className={`col`}>\r\n                        <Button component={Link} to={`/products`}\r\n                                color=\"primary\" fullWidth>\r\n                            Products\r\n                        </Button>\r\n                    </div>\r\n                    <div className={`col`}>\r\n                        <Button component={Link} to={`/signin`}\r\n                                color=\"primary\" variant=\"contained\" fullWidth\r\n                                className={`text-white text-decoration-none`}\r\n                        >\r\n                            Sign in\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n});\r\n\r\nexport default MyOrders;","C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\views\\admin\\category\\CategoryForm.js",["209","210"],"import React, {useEffect, useRef, useState} from \"react\";\r\nimport {Form, Field, FieldArray, Formik, useFormikContext} from \"formik\";\r\nimport Button from \"@mui/material/Button\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport {FormControl, InputLabel, MenuItem, Select} from \"@mui/material\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport * as yup from \"yup\";\r\nimport {wrapComponent} from \"react-snackbar-alert\";\r\nimport {useHistory, useParams} from \"react-router\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport {CategoryActions} from \"../../../redux/actions/categoryActions\";\r\nimport {AttributeActions} from \"../../../redux/actions/attributeActions\";\r\nimport AddCircleOutlineIcon from '@mui/icons-material/AddCircleOutline';\r\nimport RemoveCircleOutline from '@mui/icons-material/RemoveCircleOutline';\r\n\r\nconst validationSchema = yup.object({\r\n    name: yup.string(\"Enter Category\").required(\"Category is required\")\r\n});\r\n\r\nconst CategoryForm = wrapComponent(function ({createSnackbar}) {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const {categoryId} = useParams();\r\n    const formikRef = useRef(null)\r\n    const [attributeIdsToRemove, setAttributeIdsToRemove] = useState([])\r\n\r\n    const initialValues = {\r\n        name: \"\",\r\n        attributes: []\r\n    };\r\n\r\n    function onChangeAttribute(e, field, values, setValues, action, i) {\r\n        if(Boolean(categoryId) && action === \"delete\"){\r\n            deleteAttribute(values.attributes[i].id, false)\r\n        }\r\n        const attributes = [...values.attributes];\r\n        if(action === \"add\"){\r\n            attributes.push({\r\n                id: -1,\r\n                name: \"\",\r\n                suffix: \"\",\r\n                categoryId: -1,\r\n                numeric: false\r\n            })\r\n        }\r\n        else if(action === \"delete\"){\r\n            attributes.splice(i, 1)\r\n        }\r\n        setValues({ ...values, attributes });\r\n        field.onChange(e);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (Boolean(categoryId)) {\r\n            dispatch(CategoryActions.fetchCategory(categoryId, (success, response) => {\r\n                if (Boolean(success)) {\r\n                    formikRef.current.setFieldValue(\"name\", response.data.name)\r\n                    dispatch(AttributeActions.fetchAttributesByCategory(categoryId, (success, response) => {\r\n                        setTimeout(function (){ //da ne se pojavi error dodeka refreshne, ako mozhe\r\n                            if(Boolean(success)){//bolje reshenie da se najde bi bilo top (da odma se pojavat atributi bez refresh)\r\n                                formikRef.current.setFieldValue(\"attributes\", response.data)\r\n                            }\r\n                            else {\r\n                                createSnackbar({\r\n                                    message: 'Attributes fetching error!',\r\n                                    timeout: 2500,\r\n                                    theme: 'error'\r\n                                });\r\n                            }\r\n                        }, 0)\r\n                    }))\r\n                } else {\r\n                    createSnackbar({\r\n                        message: 'Category not found!',\r\n                        timeout: 2500,\r\n                        theme: 'error'\r\n                    });\r\n                    history.goBack();\r\n                }\r\n            }));\r\n        }\r\n    }, []);\r\n\r\n    function submitCategory(values){\r\n        if (categoryId) {\r\n            deleteAttribute(-1, true)\r\n            dispatch(\r\n                CategoryActions.updateCategory(categoryId, values, success => {\r\n                    createSnackbar({\r\n                        message: success ? \"Successfully Updated Category\" : \"Category failed to Update\",\r\n                        timeout: 2500,\r\n                        theme: success ? \"success\" : \"error\",\r\n                    });\r\n                    if(values.attributes.length>0)\r\n                        updateAttributes(values)\r\n                })\r\n            );\r\n        } else {\r\n            dispatch(\r\n                CategoryActions.addCategory(values, (success, response) => {\r\n                    createSnackbar({\r\n                        message: success ? \"Successfully created category\" : \"Category failed to create\",\r\n                        timeout: 2500,\r\n                        theme: success ? \"success\" : \"error\",\r\n                    });\r\n                    success && history.push(`/categories/edit/${response.data.id}`);\r\n                    if(values.attributes.length>0)\r\n                        addAttributes(values, response.data.id)\r\n                })\r\n            );\r\n        }\r\n    }\r\n\r\n    function addAttributes(values, cat_id){\r\n        values.attributes.forEach(attr => attr.categoryId = cat_id)\r\n        dispatch(\r\n            AttributeActions.addAttributes(values.attributes, (success, response) => {\r\n                //window.location.reload()\r\n            })\r\n        );\r\n    }\r\n\r\n    function updateAttributes(values){\r\n        let attributesToAdd = []\r\n        values.attributes.forEach(attr => {\r\n            if(attr.id === -1){\r\n                attributesToAdd.push(attr)\r\n            }\r\n            else{\r\n                dispatch(\r\n                    AttributeActions.updateAttribute(attr, (success, response) => {\r\n                        //window.location.reload()\r\n                    })\r\n                )\r\n            }\r\n        })\r\n        attributesToAdd.forEach(attr => attr.categoryId = categoryId)\r\n        dispatch(\r\n            AttributeActions.addAttributes(attributesToAdd, (success, response) => {\r\n                //window.location.reload()\r\n            })\r\n        );\r\n    }\r\n\r\n    function deleteAttribute(id, final){\r\n        if(final) {\r\n            let i=0;\r\n            function deleteCategoryAttribute(attr_id){\r\n                dispatch(\r\n                    AttributeActions.deleteAttribute(attr_id, (success, response) => {\r\n                        i++\r\n                        if(i<attributeIdsToRemove.length)\r\n                            deleteCategoryAttribute(attributeIdsToRemove[i])\r\n                    })\r\n                )\r\n            }\r\n            deleteCategoryAttribute(attributeIdsToRemove[i])\r\n        }\r\n        else{\r\n            setAttributeIdsToRemove([...attributeIdsToRemove, id])\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={`container p-5 w-50`}>\r\n            <h3>\r\n                {Boolean(categoryId) ? 'Edit Category' : 'Create Category'}\r\n            </h3>\r\n            <Formik initialValues={initialValues} validationSchema={validationSchema} onSubmit={submitCategory} innerRef = {formikRef}>\r\n            {({errors, values, touched, setValues, handleChange}) => (\r\n            <Form className={`text-center pt-4`}>\r\n                <TextField\r\n                    className={``}\r\n                    fullWidth\r\n                    name={`name`}\r\n                    label=\"Category name\"\r\n                    type=\"name\"\r\n                    onChange={handleChange}\r\n                    value={values.name}\r\n                    error={touched.name && Boolean(errors.name)}\r\n                    helperText={touched.name && errors.name}\r\n                />\r\n                <div className={'row'}>\r\n                    <h3 className={'text-start pt-4 pb-1 col-6'}>\r\n                        {\"Attributes\"}\r\n                    </h3>\r\n                    <div className={'col-4'}/>\r\n                    <Field>\r\n                        {({ field }) => (\r\n                            <div className={\"col-2 pt-2\"}>\r\n                                <IconButton aria-label=\"add\"\r\n                                            className={''}\r\n                                            onClick={e => onChangeAttribute(e, field, values, setValues, \"add\")}\r\n                                >\r\n                                    <AddCircleOutlineIcon />\r\n                                </IconButton>\r\n                            </div>\r\n                        )}\r\n                    </Field>\r\n                </div>\r\n                <FieldArray name=\"attributes\">\r\n                    {() => (values.attributes.map((attribute, i) => {\r\n                        return (\r\n                            <div key={i} className=\"list-group list-group-flush\">\r\n                                <div className=\"list-group-item\">\r\n                                    <div className=\"form-row row\">\r\n                                        <div className=\"form-group col-5\">\r\n                                            <TextField\r\n                                                className={``}\r\n                                                fullWidth\r\n                                                name={`attributes.${i}.name`}\r\n                                                label=\"Attribute name\"\r\n                                                type=\"name\"\r\n                                                onChange={handleChange}\r\n                                                value={values.attributes[i].name}\r\n                                            />\r\n                                        </div>\r\n                                        <div className=\"form-group col\">\r\n                                            <FormControl fullWidth>\r\n                                            <InputLabel>Numeric</InputLabel>\r\n                                            <Select\r\n                                                name={`attributes.${i}.numeric`}\r\n                                                onChange={handleChange}\r\n                                                value={values.attributes[i].numeric}\r\n                                            >\r\n                                                <MenuItem value={true}>True</MenuItem>\r\n                                                <MenuItem value={false}>False</MenuItem>\r\n                                            </Select>\r\n                                            </FormControl>\r\n                                        </div>\r\n                                        <div className=\"form-group col-4\">\r\n                                            <TextField\r\n                                                className={``}\r\n                                                fullWidth\r\n                                                name={`attributes.${i}.suffix`}\r\n                                                label=\"Attribute suffix\"\r\n                                                type=\"name\"\r\n                                                onChange={handleChange}\r\n                                                value={values.attributes[i].suffix}\r\n                                            />\r\n                                        </div>\r\n                                        <div className={\"form-group col-1\"}>\r\n                                            <Field>\r\n                                                {({ field }) => (\r\n                                                    <div className={\"col-2 pt-2\"}>\r\n                                                        <IconButton aria-label=\"delete\"\r\n                                                            className={''}\r\n                                                            onClick={e => onChangeAttribute(e, field, values, setValues, \"delete\", i)}\r\n                                                            >\r\n                                                        <RemoveCircleOutline />\r\n                                                    </IconButton>\r\n                                                    </div>\r\n                                                )}\r\n                                            </Field>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        );\r\n                    }))}\r\n                </FieldArray>\r\n                <div className={`pt-3 float-left`}>\r\n                    <Button\r\n                        color=\"primary\"\r\n                        variant=\"contained\"\r\n                        type=\"submit\"\r\n                    >\r\n                        {categoryId ? \"Edit\" : \"Create\"}\r\n                    </Button>\r\n                    <Button\r\n                        color=\"primary\"\r\n                        href={'/admin'}\r\n                    >\r\n                        Exit\r\n                    </Button>\r\n                </div>\r\n            </Form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default CategoryForm;\r\n","C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\views\\shopping_cart\\ShoppingCartView.js",["211","212"],"import {wrapComponent} from \"react-snackbar-alert\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {useHistory, useParams} from \"react-router\";\r\nimport {ShoppingCartActions} from \"../../redux/actions/shoppingCartActions\";\r\nimport {Link} from \"react-router-dom\";\r\nimport Button from \"@mui/material/Button\";\r\nimport React, {useEffect, useState} from \"react\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport Table from \"@mui/material/Table\";\r\nimport TableHead from \"@mui/material/TableHead\";\r\nimport TableRow from \"@mui/material/TableRow\";\r\nimport TableCell from \"@mui/material/TableCell\";\r\nimport TableBody from \"@mui/material/TableBody\";\r\nimport HighlightOffIcon from \"@mui/icons-material/HighlightOff\";\r\nimport TableContainer from \"@mui/material/TableContainer\";\r\nimport {sortElementsByDateCreated} from \"../../utils/utils\";\r\n\r\nconst ShoppingCartView = wrapComponent(function ({createSnackbar}) {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n    const [shoppingCart, setShoppingCart] = useState(null);\r\n    const [products, setProducts] = useState(null);\r\n    const {username} = useParams();\r\n\r\n    useEffect(() => {\r\n        dispatch(ShoppingCartActions.fetchShoppingCart(username, (success, response) => {\r\n            if (success) {\r\n                if (username === response.data.username) {\r\n                    setProducts(sortElementsByDateCreated(response.data.productsInShoppingCart));\r\n                    setShoppingCart(response.data);\r\n                } else {\r\n                    createSnackbar({\r\n                        message: 'Sorry, you must be signed in in order to see your shopping cart.',\r\n                        timeout: 3000,\r\n                        theme: 'error'\r\n                    });\r\n                    history.goBack();\r\n                }\r\n            } else {\r\n                createSnackbar({\r\n                    message: 'Error while accessing shopping cart.',\r\n                    timeout: 2500,\r\n                    theme: 'error'\r\n                });\r\n                history.goBack();\r\n            }\r\n        }));\r\n    }, []);\r\n\r\n    const handleDeleteFromCart = productId => {\r\n        dispatch(ShoppingCartActions.deleteFromShoppingCart({\r\n            'productId': productId,\r\n            'username': username\r\n        }, (success, response) => {\r\n            if (success) {\r\n                window.location.reload();\r\n            }\r\n        }));\r\n    };\r\n\r\n    const calculateTotalPrice = products => {\r\n        let totalPrice = 0;\r\n        products.map(product => (\r\n            totalPrice += product.priceInMKD\r\n        ))\r\n        return totalPrice;\r\n    }\r\n\r\n    return (\r\n        <div className={`container p-5`}>\r\n            <div className={`pb-3 mb-3`}>\r\n                <h3>\r\n                    Shopping Cart\r\n                </h3>\r\n            </div>\r\n            <TableContainer component={Paper}>\r\n                <Table className={``} aria-label=\"simple table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell align=\"left\"/>\r\n                            <TableCell align=\"left\">Product</TableCell>\r\n                            <TableCell align=\"left\">Price</TableCell>\r\n                            <TableCell align=\"left\">Quantity</TableCell>\r\n                            <TableCell align=\"left\">Total price</TableCell>\r\n                            <TableCell align=\"left\"/>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {products && products.map((product, i) => (\r\n                            <TableRow key={product.id}>\r\n                                <TableCell component=\"th\" scope=\"row\" padding=\"none\"\r\n                                           align=\"center\">\r\n                                    <img src={`http://localhost:8080/api/products/images/${product.productId}/s/main`}\r\n                                         alt={`Product IMG`}\r\n                                    />\r\n                                </TableCell>\r\n                                <TableCell align=\"left\">{product.productTitle}</TableCell>\r\n                                <TableCell align=\"left\">{product.priceInMKD} MKD</TableCell>\r\n                                <TableCell align=\"left\">{product.quantity}</TableCell>\r\n                                <TableCell align=\"left\">\r\n                                    {product.priceInMKD * product.quantity} MKD\r\n                                </TableCell>\r\n                                <TableCell align=\"left\">\r\n                                    <Button onClick={() => {\r\n                                        // eslint-disable-next-line no-unused-expressions\r\n                                        (window.confirm('Are you sure you wish to delete this item from the cart?')) ?\r\n                                            handleDeleteFromCart(product.id)\r\n                                            : null\r\n                                    }}>\r\n                                        <HighlightOffIcon/>\r\n                                    </Button>\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                        <TableRow>\r\n                            <TableCell/>\r\n                            <TableCell/>\r\n                            <TableCell align=\"left\">Total:</TableCell>\r\n                            <TableCell/>\r\n                            <TableCell align=\"left\">\r\n                                {products && calculateTotalPrice(products)} MKD\r\n                            </TableCell>\r\n                            <TableCell/>\r\n                        </TableRow>\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n            <div className={`pt-3 float-right`}>\r\n                <Button component={Link}\r\n                        color=\"primary\"\r\n                        to={`/products`}\r\n                >\r\n                    Continue shopping\r\n                </Button>\r\n                {\r\n                    products && products.length > 0 ?\r\n                        <Button component={Link}\r\n                                color=\"primary\"\r\n                                variant=\"contained\"\r\n                                to={`/order-form/${username}`}\r\n                                className={`text-white text-decoration-none`}\r\n                        >\r\n                            Checkout\r\n                        </Button>\r\n                        : null\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default ShoppingCartView;","C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\views\\products\\ProductView.js",["213","214","215","216","217","218"],"import React, {useEffect, useState} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {ProductActions} from \"../../redux/actions/productActions\";\r\nimport {Link} from \"react-router-dom\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Roles from \"../../auth/Roles\";\r\nimport {ShoppingCartActions} from \"../../redux/actions/shoppingCartActions\";\r\nimport {wrapComponent} from \"react-snackbar-alert\";\r\nimport {useHistory} from \"react-router\";\r\nimport ProductsFilterComponent from \"../../utils/productsFilterComponent\";\r\nimport {\r\n    Card,\r\n    CardContent,\r\n    CardActions,\r\n    CardActionArea,\r\n    CardMedia,\r\n    Typography,\r\n    InputLabel,\r\n    Select,\r\n    MenuItem, FormControl\r\n} from \"@mui/material\";\r\nimport {CategoryActions} from \"../../redux/actions/categoryActions\";\r\n\r\nconst ProductView = wrapComponent(function ({createSnackbar}) {\r\n    const dispatch = useDispatch();\r\n    const products = useSelector(state => state.product.products);\r\n    const auth = useSelector(state => state.auth.currentUser);\r\n    const history = useHistory();\r\n    const [productsFetched, setProductsFetched] = useState(false)\r\n    const [categories, setCategories] = useState([])\r\n    const [currentCategoryName, setCurrentCategoryName] = useState(\"All Products\")\r\n\r\n    const [role, setRole] = useState(null);\r\n\r\n    useEffect(() => {\r\n        if (auth) {\r\n            setRole(auth.role);\r\n        }\r\n    }, [auth]);\r\n\r\n    useEffect(() => {\r\n        dispatch(ProductActions.fetchAllProducts((success, response) => {\r\n            if (Boolean(success)) {\r\n                setProductsFetched(true)\r\n            }\r\n        }));\r\n        dispatch(CategoryActions.fetchAllCategories((success, response) => {\r\n            if (success) {\r\n                var array = response.data\r\n                array.unshift({\r\n                    id: -1,\r\n                    name: \"All Products\"\r\n                })\r\n                setCategories(array)\r\n            }\r\n        }));\r\n    }, []);\r\n\r\n    const handleAddToCart = id => {\r\n        if (Boolean(role)) {\r\n            dispatch(ShoppingCartActions.addToShoppingCart(auth.username, {\r\n                'productId': id,\r\n                'quantity': 1,\r\n            }, (success, response) => {\r\n                createSnackbar({\r\n                    message: success ? 'Successfully added product to cart.' : 'Failed to add product to cart.',\r\n                    timeout: 2500,\r\n                    theme: success ? 'success' : 'error'\r\n                });\r\n            }))\r\n        } else {\r\n            createSnackbar({\r\n                message: 'Sorry, you must be signed in in order to add items to your shopping cart.',\r\n                timeout: 3000,\r\n                theme: 'error'\r\n            });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className={`container p-5`}>\r\n            <div>\r\n                {\r\n                    role === Roles.ADMIN ?\r\n                        <Button component={Link}\r\n                                to={'/products/add'}\r\n                                variant=\"contained\" color=\"primary\"\r\n                                className={`text-white text-decoration-none float-right`}\r\n                        >\r\n                            ADD PRODUCT\r\n                        </Button>\r\n                        :\r\n                        null\r\n                }\r\n                <h3>\r\n                    {currentCategoryName}\r\n                </h3>\r\n            </div>\r\n            <div className={`row`}>\r\n                {productsFetched ?\r\n                    <div className={`col-md-3`}>\r\n                        <div className={`positionFixed`}>\r\n                            <h4 className={`pt-4`}>\r\n                                Filter products\r\n                            </h4>\r\n                            <ProductsFilterComponent categories={categories}/>\r\n                        </div>\r\n                    </div>\r\n                    : null\r\n                }\r\n                <div className={`col-md-9`}>\r\n                    <div className={`row`}>\r\n                        {products && products.map((product, i) => (\r\n                            <div className={`col-md-4 col-sm-6`}>\r\n                                <Card className={`card-width`}>\r\n                                    <CardActionArea onClick={() => history.push(`/products/${product.id}`)}>\r\n                                        <CardMedia\r\n                                            component=\"img\"\r\n                                            height=\"280\"\r\n                                            image={\"http://localhost:8080/api/products/images/\" + product.id + \"/m/main\"}\r\n                                            alt={product.productTitle}\r\n                                        />\r\n                                        <CardContent>\r\n                                            <Typography className={`card-title-height`}\r\n                                                        gutterBottom variant=\"h5\" component=\"div\">\r\n                                                {product.productTitle}\r\n                                            </Typography>\r\n                                            <Typography variant=\"h6\" color=\"text.primary\">\r\n                                                {product.priceInMKD} MKD\r\n                                            </Typography>\r\n                                        </CardContent>\r\n                                    </CardActionArea>\r\n                                    <CardActions>\r\n                                        <div className={`row p-1`}>\r\n                                            <div className={`col`}>\r\n                                                <Button color={\"primary\"}\r\n                                                        onClick={() => handleAddToCart(product.id)}\r\n                                                        variant=\"contained\">\r\n                                                    Add to cart\r\n                                                </Button>\r\n                                            </div>\r\n                                            {role === Roles.ADMIN ?\r\n                                                <div className={`col-md-4`}>\r\n                                                    <Button color=\"primary\"\r\n                                                            component={Link}\r\n                                                            to={`/products/edit/${product.id}`}\r\n                                                    >\r\n                                                        EDIT\r\n                                                    </Button>\r\n                                                </div>\r\n                                                : null\r\n                                            }\r\n                                        </div>\r\n                                    </CardActions>\r\n                                </Card>\r\n                                <br/>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default ProductView;","C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\views\\products\\ProductDetails.js",["219","220","221"],"C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\components\\AuthButton.js",[],"C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\redux\\actions\\categoryActions.js",[],"C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\redux\\actions\\userActions.js",[],"C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\redux\\actions\\orderActions.js",[],"C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\redux\\actions\\attributeActions.js",["222"],"import axios from \"../../axios/axiosInstance\";\r\nimport {\r\n    FETCH_ATTRIBUTES,\r\n    FETCH_ATTRIBUTE,\r\n    FETCH_ATTRIBUTES_BY_CATEGORY,\r\n    UPDATE_ATTRIBUTE,\r\n    ADD_ATTRIBUTE,\r\n    ADD_ATTRIBUTES,\r\n    DELETE_ATTRIBUTE\r\n} from \"../actionTypes\";\r\n\r\nexport const AttributeActions = {\r\n    fetchAllAttributes: () => dispatch => {\r\n        axios.get(\"/attributes\").then(response => {\r\n            dispatch({\r\n                type: FETCH_ATTRIBUTES,\r\n                attributes: response.data,\r\n            });\r\n        });\r\n    },\r\n    fetchAttribute: (id, callback) => dispatch => {\r\n        axios.get(`/attributes/${id}`).then(response => {\r\n            dispatch({\r\n                type: FETCH_ATTRIBUTE,\r\n                attribute: response.data,\r\n            });\r\n            callback(true, response);\r\n        }).catch((error) => {\r\n            callback(false, error)\r\n        });\r\n    },\r\n    fetchAttributesByCategory: (cat_id, callback) => dispatch => {\r\n        axios.get(`/attributes/bycategory/${cat_id}`).then(response => {\r\n            dispatch({\r\n                type: FETCH_ATTRIBUTES_BY_CATEGORY,\r\n                attributes: response.data,\r\n            });\r\n            callback(true, response);\r\n        }).catch((error) => {\r\n            callback(false, error)\r\n        });\r\n    },\r\n    updateAttribute: (attribute, callback) => dispatch => {\r\n        axios.put(`/attributes/update`, attribute)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: UPDATE_ATTRIBUTE,\r\n                    attribute: response.data,\r\n                });\r\n                callback(true);\r\n            })\r\n            .catch(() => {\r\n                callback(false);\r\n            });\r\n    },\r\n    addAttribute: (attribute, callback) => dispatch => {\r\n        axios.post(\"/attributes/create\", attribute).then(response => {\r\n            dispatch({\r\n                type: ADD_ATTRIBUTE,\r\n                attribute: response.data,\r\n            });\r\n            callback(true, response);\r\n        }).catch((error) => {\r\n            callback(false, error);\r\n        })\r\n    },\r\n    addAttributes: (attributes, callback) => dispatch => {\r\n        axios.post(\"/attributes/createall\", attributes).then(response => {\r\n            dispatch({\r\n                type: ADD_ATTRIBUTES,\r\n                response: response.data,\r\n            });\r\n            callback(true, response);\r\n        }).catch((error) => {\r\n            callback(false, error);\r\n        })\r\n    },\r\n    deleteAttribute: (id, callback) => dispatch => {\r\n        axios.delete(`/attributes/delete/${id}`).then(response => {\r\n            callback(true, response);\r\n        }).catch((error) => {\r\n            callback(false, error);\r\n        })\r\n    }\r\n}","C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\utils\\imageUploadComponent.js",["223","224"],"import React, { Component } from 'react';\r\nimport Button from \"@mui/material/Button\";\r\nimport {Card, CardMedia, CardActions, Radio, CardActionArea, CardContent, Grid} from \"@mui/material\";\r\nimport {Add} from \"@mui/icons-material\"\r\n\r\nclass ImageUploadComponent extends Component {\r\n\r\n    fileObj = [];\r\n    fileArray = [];\r\n    productId = -1;\r\n\r\n    allImageFileTypes = [\r\n        '.tif', '.pjp', '.xbm', '.jxl', '.svgz', '.jpg', '.jpeg', '.ico', '.tiff', '.gif',\r\n        '.svg', '.jfif', '.webp', '.png', '.bmp', '.pjpeg', '.avif'\r\n    ]\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            images: [],\r\n            mainImage: 0\r\n        }\r\n        this.productId = this.props.productId;\r\n        this.changeMainImage = this.changeMainImage.bind(this)\r\n        this.uploadMultipleFiles = this.uploadMultipleFiles.bind(this)\r\n        this.removeImage = this.removeImage.bind(this)\r\n        this.initImages()\r\n    }\r\n\r\n    async initImages(){\r\n        let mainImage = 0;\r\n        if(this.productId !== -1){\r\n            let imagePaths = [];\r\n            await fetch(\"http://localhost:8080/api/products/images/\" + this.productId, { method: 'GET' })\r\n                .then(response => response.json())\r\n                .then(data => imagePaths = data);\r\n            await fetch(\"http://localhost:8080/api/products/images/main/\" + this.productId, { method: 'GET' })\r\n                .then(response => response.text())\r\n                .then(data => mainImage = data);\r\n            for(let i=0; i<imagePaths.length; i++){\r\n                this.fileObj.push(\"http://localhost:8080/api/products/images/\" + this.productId + \"/s/\" + imagePaths[i]);\r\n                this.fileArray.push(\"http://localhost:8080/api/products/images/\" + this.productId + \"/s/\" + imagePaths[i]);\r\n                if(imagePaths[i]===mainImage){\r\n                    mainImage = i+1\r\n                }\r\n            }\r\n            this.setState({ images: this.fileObj, mainImage: mainImage })\r\n            this.handleImageChange(this.fileObj, mainImage)\r\n        }\r\n    }\r\n\r\n    removeImageRemotely(image_id){\r\n        this.props.removeImageRemotely(image_id)\r\n    }\r\n\r\n    handleImageChange(images, mainImage){\r\n        this.props.handleImagesChange({images, mainImage})\r\n    }\r\n\r\n    changeMainImage(v){\r\n        this.setState({mainImage: v})\r\n        this.handleImageChange(this.state.images, v)\r\n    }\r\n\r\n    uploadMultipleFiles(e) {\r\n        for (let i = 0; i < e.target.files.length; i++){\r\n            if(this.allImageFileTypes.includes(\r\n                e.target.files[i].name.toLowerCase().substring(e.target.files[i].name.lastIndexOf(\".\"))\r\n            )){\r\n                this.fileObj.push(e.target.files[i]);\r\n                this.fileArray.push(URL.createObjectURL(e.target.files[i]))\r\n            }\r\n        }\r\n        this.setState({ images: this.fileObj })\r\n        this.handleImageChange(this.fileObj, this.state.mainImage)\r\n    }\r\n\r\n    removeImage(i) {\r\n        this.fileObj.splice(i, 1)\r\n        const removedImage = this.fileArray.splice(i, 1)[0]\r\n        if(removedImage.substring(0, 4) !== \"blob\"){\r\n            const parts = removedImage.split(\"/\")\r\n            this.removeImageRemotely(Number(parts[parts.length-1].replace('.jpg', '')))\r\n        }\r\n        let mainImage = 0\r\n        if(this.state.images.length > 1){\r\n            if(i+1<this.state.mainImage)\r\n                mainImage = this.state.mainImage - 1\r\n            else if(i+1>this.state.mainImage)\r\n                mainImage = this.state.mainImage\r\n        }\r\n        this.setState({ images: this.fileObj, mainImage: mainImage })\r\n        this.handleImageChange(this.fileObj, mainImage)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form className={'row'}>\r\n                <div className=\"form-group multi-preview row\">\r\n                    {(this.fileArray || []).map((url, i) => (\r\n                        <Card className={this.state.mainImage === i+1 ? 'col-6 border border-warning border-3' : 'col-6'}>\r\n                            <CardActionArea\r\n                                onClick={() => this.changeMainImage(i+1)}\r\n                            >\r\n                            <CardMedia\r\n                                component=\"img\"\r\n                                height=\"250\"\r\n                                image={url}\r\n                            />\r\n                            </CardActionArea>\r\n                            <CardActions>\r\n                                <Button className={'text-white bg-danger'} onClick={() => this.removeImage(i)}>X</Button>\r\n                            </CardActions>\r\n                        </Card>\r\n                    ))}\r\n                    <Card className={'col-6 p-0'}>\r\n                        <CardActionArea\r\n                            onClick={() => {\r\n                                document.getElementById(\"imageUpload\").click();\r\n                            }}\r\n                            className={'h-100'}\r\n                        >\r\n                            <CardContent sx={{height:250, display:'flex', justifyContent:'center', alignItems:'center'}}>\r\n                                <Add fontSize={\"large\"} />\r\n                            </CardContent>\r\n                        </CardActionArea>\r\n                    </Card>\r\n                </div>\r\n\r\n                <div className=\"form-group col mt-3\">\r\n                    <input id=\"imageUpload\" type=\"file\" hidden className=\"form-control\" accept={\"image/*\"} onChange={this.uploadMultipleFiles} multiple />\r\n                </div>\r\n            </form >\r\n        )\r\n    }\r\n}\r\n\r\nexport default ImageUploadComponent;","C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\redux\\actions\\shoppingCartActions.js",[],"C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\redux\\actions\\productActions.js",[],"C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\utils\\productsFilterComponent.js",["225","226","227","228","229","230"],"C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\views\\admin\\category\\DefaultCategoryAttributes.js",[],"C:\\Users\\GP\\IdeaProjects\\wineshop-frontend\\src\\views\\products\\productImage.js",["231"],{"ruleId":"232","replacedBy":"233"},{"ruleId":"234","replacedBy":"235"},{"ruleId":"236","severity":1,"message":"237","line":6,"column":37,"nodeType":"238","messageId":"239","endLine":6,"endColumn":38},{"ruleId":"240","severity":1,"message":"241","line":3,"column":62,"nodeType":"242","messageId":"243","endLine":3,"endColumn":69},{"ruleId":"244","severity":1,"message":"245","line":12,"column":1,"nodeType":"246","endLine":15,"endColumn":3},{"ruleId":"247","severity":1,"message":"248","line":25,"column":8,"nodeType":"249","endLine":25,"endColumn":10,"suggestions":"250"},{"ruleId":"247","severity":1,"message":"251","line":39,"column":8,"nodeType":"249","endLine":39,"endColumn":10,"suggestions":"252"},{"ruleId":"240","severity":1,"message":"253","line":10,"column":9,"nodeType":"242","messageId":"243","endLine":10,"endColumn":24},{"ruleId":"240","severity":1,"message":"254","line":10,"column":42,"nodeType":"242","messageId":"243","endLine":10,"endColumn":59},{"ruleId":"240","severity":1,"message":"255","line":20,"column":8,"nodeType":"242","messageId":"243","endLine":20,"endColumn":24},{"ruleId":"247","severity":1,"message":"256","line":58,"column":8,"nodeType":"249","endLine":58,"endColumn":10,"suggestions":"257"},{"ruleId":"247","severity":1,"message":"258","line":83,"column":8,"nodeType":"249","endLine":83,"endColumn":10,"suggestions":"259"},{"ruleId":"247","severity":1,"message":"256","line":49,"column":8,"nodeType":"249","endLine":49,"endColumn":10,"suggestions":"260"},{"ruleId":"240","severity":1,"message":"261","line":2,"column":42,"nodeType":"242","messageId":"243","endLine":2,"endColumn":58},{"ruleId":"247","severity":1,"message":"262","line":82,"column":8,"nodeType":"249","endLine":82,"endColumn":10,"suggestions":"263"},{"ruleId":"240","severity":1,"message":"264","line":22,"column":12,"nodeType":"242","messageId":"243","endLine":22,"endColumn":24},{"ruleId":"247","severity":1,"message":"256","line":49,"column":8,"nodeType":"249","endLine":49,"endColumn":10,"suggestions":"265"},{"ruleId":"240","severity":1,"message":"266","line":18,"column":5,"nodeType":"242","messageId":"243","endLine":18,"endColumn":15},{"ruleId":"240","severity":1,"message":"267","line":19,"column":5,"nodeType":"242","messageId":"243","endLine":19,"endColumn":11},{"ruleId":"240","severity":1,"message":"268","line":20,"column":5,"nodeType":"242","messageId":"243","endLine":20,"endColumn":13},{"ruleId":"240","severity":1,"message":"269","line":20,"column":15,"nodeType":"242","messageId":"243","endLine":20,"endColumn":26},{"ruleId":"240","severity":1,"message":"270","line":31,"column":33,"nodeType":"242","messageId":"243","endLine":31,"endColumn":55},{"ruleId":"247","severity":1,"message":"248","line":57,"column":8,"nodeType":"249","endLine":57,"endColumn":10,"suggestions":"271"},{"ruleId":"240","severity":1,"message":"272","line":19,"column":22,"nodeType":"242","messageId":"243","endLine":19,"endColumn":33},{"ruleId":"247","severity":1,"message":"273","line":60,"column":8,"nodeType":"249","endLine":60,"endColumn":10,"suggestions":"274"},{"ruleId":"275","severity":1,"message":"276","line":177,"column":41,"nodeType":"277","endLine":181,"endColumn":43},{"ruleId":"240","severity":1,"message":"278","line":9,"column":5,"nodeType":"242","messageId":"243","endLine":9,"endColumn":21},{"ruleId":"240","severity":1,"message":"279","line":3,"column":39,"nodeType":"242","messageId":"243","endLine":3,"endColumn":44},{"ruleId":"240","severity":1,"message":"280","line":3,"column":75,"nodeType":"242","messageId":"243","endLine":3,"endColumn":79},{"ruleId":"240","severity":1,"message":"281","line":1,"column":16,"nodeType":"242","messageId":"243","endLine":1,"endColumn":22},{"ruleId":"282","severity":1,"message":"283","line":59,"column":22,"nodeType":"242","messageId":"284","endLine":59,"endColumn":25},{"ruleId":"247","severity":1,"message":"285","line":72,"column":8,"nodeType":"249","endLine":72,"endColumn":25,"suggestions":"286"},{"ruleId":"247","severity":1,"message":"248","line":103,"column":8,"nodeType":"249","endLine":103,"endColumn":23,"suggestions":"287"},{"ruleId":"247","severity":1,"message":"288","line":141,"column":8,"nodeType":"249","endLine":141,"endColumn":17,"suggestions":"289"},{"ruleId":"290","severity":1,"message":"291","line":156,"column":38,"nodeType":"292","messageId":"293","endLine":158,"endColumn":18},{"ruleId":"275","severity":1,"message":"276","line":17,"column":13,"nodeType":"277","endLine":20,"endColumn":15},"no-native-reassign",["294"],"no-negated-in-lhs",["295"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","no-unused-vars","'SIGN_UP' is defined but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["296"],"React Hook useEffect has missing dependencies: 'authToken', 'dispatch', and 'history'. Either include them or remove the dependency array.",["297"],"'CountryDropdown' is defined but never used.","'CountryRegionData' is defined but never used.","'HighlightOffIcon' is defined but never used.","React Hook useEffect has missing dependencies: 'createSnackbar', 'dispatch', 'history', and 'username'. Either include them or remove the dependency array. If 'createSnackbar' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["298"],"React Hook useEffect has missing dependencies: 'dispatch', 'history', and 'productId'. Either include them or remove the dependency array.",["299"],["300"],"'useFormikContext' is defined but never used.","React Hook useEffect has missing dependencies: 'categoryId', 'createSnackbar', 'dispatch', and 'history'. Either include them or remove the dependency array. If 'createSnackbar' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["301"],"'shoppingCart' is assigned a value but never used.",["302"],"'InputLabel' is defined but never used.","'Select' is defined but never used.","'MenuItem' is defined but never used.","'FormControl' is defined but never used.","'setCurrentCategoryName' is assigned a value but never used.",["303"],"'setQuantity' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'createSnackbar', 'dispatch', 'history', and 'productId'. Either include them or remove the dependency array. If 'createSnackbar' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["304"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'DELETE_ATTRIBUTE' is defined but never used.","'Radio' is defined but never used.","'Grid' is defined but never used.","'useRef' is defined but never used.","no-redeclare","'key' is already defined.","redeclared","React Hook useEffect has missing dependencies: 'priceRange.length' and 'products'. Either include them or remove the dependency array.",["305"],["306"],"React Hook useEffect has a missing dependency: 'fetchFilteredProducts'. Either include it or remove the dependency array.",["307"],"no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'string', 'string'.","ArrowFunctionExpression","unsafeRefs","no-global-assign","no-unsafe-negation",{"desc":"308","fix":"309"},{"desc":"310","fix":"311"},{"desc":"312","fix":"313"},{"desc":"314","fix":"315"},{"desc":"312","fix":"316"},{"desc":"317","fix":"318"},{"desc":"312","fix":"319"},{"desc":"308","fix":"320"},{"desc":"321","fix":"322"},{"desc":"323","fix":"324"},{"desc":"325","fix":"326"},{"desc":"327","fix":"328"},"Update the dependencies array to be: [dispatch]",{"range":"329","text":"330"},"Update the dependencies array to be: [authToken, dispatch, history]",{"range":"331","text":"332"},"Update the dependencies array to be: [createSnackbar, dispatch, history, username]",{"range":"333","text":"334"},"Update the dependencies array to be: [dispatch, history, productId]",{"range":"335","text":"336"},{"range":"337","text":"334"},"Update the dependencies array to be: [categoryId, createSnackbar, dispatch, history]",{"range":"338","text":"339"},{"range":"340","text":"334"},{"range":"341","text":"330"},"Update the dependencies array to be: [createSnackbar, dispatch, history, productId]",{"range":"342","text":"343"},"Update the dependencies array to be: [priceRange.length, products, productsChanged]",{"range":"344","text":"345"},"Update the dependencies array to be: [attributeSets, dispatch]",{"range":"346","text":"347"},"Update the dependencies array to be: [fetchFilteredProducts, filters]",{"range":"348","text":"349"},[1056,1058],"[dispatch]",[1649,1651],"[authToken, dispatch, history]",[2583,2585],"[createSnackbar, dispatch, history, username]",[3895,3897],"[dispatch, history, productId]",[2042,2044],[3431,3433],"[categoryId, createSnackbar, dispatch, history]",[2103,2105],[1994,1996],[2424,2426],"[createSnackbar, dispatch, history, productId]",[3119,3136],"[priceRange.length, products, productsChanged]",[4365,4380],"[attributeSets, dispatch]",[5482,5491],"[fetchFilteredProducts, filters]"]